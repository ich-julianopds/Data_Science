{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled0.ipynb",
      "provenance": [],
      "authorship_tag": "ABX9TyMDnIp2J2ZXqJcF5Wut8uND",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/ich-julianopds/Data_Science/blob/master/An%C3%A1lise%20de%20Dados-%20Acidentes%20em%20S%C3%A3o%20Paulo\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bX_neeNupxuB",
        "colab_type": "code",
        "outputId": "0f8aaeeb-1469-4f38-eca5-da36a68b12db",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 105
        }
      },
      "source": [
        "!pip install https://github.com/pandas-profiling/pandas-profiling/archive/master.zip-q"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Collecting https://github.com/pandas-profiling/pandas-profiling/archive/master.zip-q\n",
            "\u001b[31m  ERROR: HTTP error 404 while getting https://github.com/pandas-profiling/pandas-profiling/archive/master.zip-q\u001b[0m\n",
            "\u001b[31m  ERROR: Could not install requirement https://github.com/pandas-profiling/pandas-profiling/archive/master.zip-q because of error 404 Client Error: Not Found for url: https://github.com/pandas-profiling/pandas-profiling/archive/master.zip-q\u001b[0m\n",
            "\u001b[31mERROR: Could not install requirement https://github.com/pandas-profiling/pandas-profiling/archive/master.zip-q because of HTTP error 404 Client Error: Not Found for url: https://github.com/pandas-profiling/pandas-profiling/archive/master.zip-q for URL https://github.com/pandas-profiling/pandas-profiling/archive/master.zip-q\u001b[0m\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "cnA38DLIUf33",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "import pandas as pd"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "NNWeTVHBUohc",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "df = pd.read_csv('/content/acidentes_sp_clean.csv')"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "PWRtb2Kmigia",
        "colab_type": "code",
        "outputId": "a062826e-91ce-4017-9411-03c2ce0b3fef",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 677
        }
      },
      "source": [
        "df"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Id da Delegacia (RDO)</th>\n",
              "      <th>Número do Bo (RDO)</th>\n",
              "      <th>Ano do BO (RDO)</th>\n",
              "      <th>Data do Óbito</th>\n",
              "      <th>Data do Acidente</th>\n",
              "      <th>Tipo de via</th>\n",
              "      <th>Dia do óbito</th>\n",
              "      <th>Mês do Óbito</th>\n",
              "      <th>Mês Óbito Descrição</th>\n",
              "      <th>Ano do Óbito</th>\n",
              "      <th>Ano/Mês do Óbito</th>\n",
              "      <th>Dia da Semana</th>\n",
              "      <th>Hora do Acidente</th>\n",
              "      <th>Turno</th>\n",
              "      <th>Município</th>\n",
              "      <th>Região Administrativa</th>\n",
              "      <th>Logradouro</th>\n",
              "      <th>Númeral / KM</th>\n",
              "      <th>Jurisdição</th>\n",
              "      <th>Administração</th>\n",
              "      <th>Conservação</th>\n",
              "      <th>Tipo do local da ocorrência</th>\n",
              "      <th>LAT_(GEO)</th>\n",
              "      <th>LONG_(GEO)</th>\n",
              "      <th>Tipo do veículo da vítima</th>\n",
              "      <th>Tipo de vítima</th>\n",
              "      <th>Local do óbito</th>\n",
              "      <th>Tipo de acidente</th>\n",
              "      <th>Sub Tipo do Acidente</th>\n",
              "      <th>Tempo entre o Acidente e o óbito</th>\n",
              "      <th>Sexo</th>\n",
              "      <th>Faixa etária</th>\n",
              "      <th>Idade da vítima</th>\n",
              "      <th>Outro Veículo Envolvido</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>120514</td>\n",
              "      <td>889</td>\n",
              "      <td>2020</td>\n",
              "      <td>2020-04-30</td>\n",
              "      <td>2020-04-30</td>\n",
              "      <td>Rodovias</td>\n",
              "      <td>30</td>\n",
              "      <td>4</td>\n",
              "      <td>ABRIL</td>\n",
              "      <td>2020</td>\n",
              "      <td>2020.04</td>\n",
              "      <td>QUINTA</td>\n",
              "      <td>17:30:00</td>\n",
              "      <td>TARDE</td>\n",
              "      <td>ARACARIGUAMA</td>\n",
              "      <td>Sorocaba</td>\n",
              "      <td>SP 280</td>\n",
              "      <td>50,0</td>\n",
              "      <td>ESTADUAL</td>\n",
              "      <td>CONCESSIONÁRIA</td>\n",
              "      <td>VIAOESTE</td>\n",
              "      <td>PUBLICO</td>\n",
              "      <td>-23.439186</td>\n",
              "      <td>-47.065945</td>\n",
              "      <td>ONIBUS</td>\n",
              "      <td>CONDUTOR</td>\n",
              "      <td>VIA</td>\n",
              "      <td>CHOQUE</td>\n",
              "      <td>VEÍCULO ESTACIONADO</td>\n",
              "      <td>Mesmo dia</td>\n",
              "      <td>MASCULINO</td>\n",
              "      <td>45-49</td>\n",
              "      <td>48.0</td>\n",
              "      <td>ONIBUS</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>120514</td>\n",
              "      <td>889</td>\n",
              "      <td>2020</td>\n",
              "      <td>2020-04-30</td>\n",
              "      <td>2020-04-30</td>\n",
              "      <td>Rodovias</td>\n",
              "      <td>30</td>\n",
              "      <td>4</td>\n",
              "      <td>ABRIL</td>\n",
              "      <td>2020</td>\n",
              "      <td>2020.04</td>\n",
              "      <td>QUINTA</td>\n",
              "      <td>17:30:00</td>\n",
              "      <td>TARDE</td>\n",
              "      <td>ARACARIGUAMA</td>\n",
              "      <td>Sorocaba</td>\n",
              "      <td>SP 280</td>\n",
              "      <td>50,0</td>\n",
              "      <td>ESTADUAL</td>\n",
              "      <td>CONCESSIONÁRIA</td>\n",
              "      <td>VIAOESTE</td>\n",
              "      <td>PUBLICO</td>\n",
              "      <td>-23.439186</td>\n",
              "      <td>-47.065945</td>\n",
              "      <td>ONIBUS</td>\n",
              "      <td>PASSAGEIRO</td>\n",
              "      <td>ESTABELECIMENTO DE SAUDE</td>\n",
              "      <td>CHOQUE</td>\n",
              "      <td>VEÍCULO ESTACIONADO</td>\n",
              "      <td>Mesmo dia</td>\n",
              "      <td>MASCULINO</td>\n",
              "      <td>35-39</td>\n",
              "      <td>36.0</td>\n",
              "      <td>ONIBUS</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>110429</td>\n",
              "      <td>3887</td>\n",
              "      <td>2020</td>\n",
              "      <td>2020-04-30</td>\n",
              "      <td>2020-04-17</td>\n",
              "      <td>Rodovias</td>\n",
              "      <td>30</td>\n",
              "      <td>4</td>\n",
              "      <td>ABRIL</td>\n",
              "      <td>2020</td>\n",
              "      <td>2020.04</td>\n",
              "      <td>SEXTA</td>\n",
              "      <td>3:50:00</td>\n",
              "      <td>MADRUGADA</td>\n",
              "      <td>SAO JOSE DO RIO PRETO</td>\n",
              "      <td>São José do Rio Preto</td>\n",
              "      <td>BR 153</td>\n",
              "      <td>57,5</td>\n",
              "      <td>FEDERAL</td>\n",
              "      <td>CONCESSIONÁRIA</td>\n",
              "      <td>TRANSBRASILIANA</td>\n",
              "      <td>PUBLICO</td>\n",
              "      <td>-20.772532</td>\n",
              "      <td>-49.350863</td>\n",
              "      <td>MOTOCICLETA</td>\n",
              "      <td>CONDUTOR</td>\n",
              "      <td>ESTABELECIMENTO DE SAUDE</td>\n",
              "      <td>CHOQUE</td>\n",
              "      <td>DEFENSA / BARREIRA</td>\n",
              "      <td>Até 30 dias</td>\n",
              "      <td>MASCULINO</td>\n",
              "      <td>25-29</td>\n",
              "      <td>26.0</td>\n",
              "      <td>NÃO HÁ</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>30309</td>\n",
              "      <td>1745</td>\n",
              "      <td>2020</td>\n",
              "      <td>2020-04-30</td>\n",
              "      <td>2020-04-30</td>\n",
              "      <td>Rodovias</td>\n",
              "      <td>30</td>\n",
              "      <td>4</td>\n",
              "      <td>ABRIL</td>\n",
              "      <td>2020</td>\n",
              "      <td>2020.04</td>\n",
              "      <td>QUINTA</td>\n",
              "      <td>18:30:00</td>\n",
              "      <td>NOITE</td>\n",
              "      <td>SUZANO</td>\n",
              "      <td>Metropolitana de São Paulo</td>\n",
              "      <td>SP 021</td>\n",
              "      <td>110,0</td>\n",
              "      <td>ESTADUAL</td>\n",
              "      <td>CONCESSIONÁRIA</td>\n",
              "      <td>SPMAR</td>\n",
              "      <td>PUBLICO</td>\n",
              "      <td>-23.566580</td>\n",
              "      <td>-46.342199</td>\n",
              "      <td>PEDESTRE</td>\n",
              "      <td>PEDESTRE</td>\n",
              "      <td>VIA</td>\n",
              "      <td>ATROPELAMENTO</td>\n",
              "      <td>CRUZANDO A VIA</td>\n",
              "      <td>Mesmo dia</td>\n",
              "      <td>MASCULINO</td>\n",
              "      <td>NAO DISPONIVEL</td>\n",
              "      <td>NaN</td>\n",
              "      <td>AUTOMOVEL</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>70923</td>\n",
              "      <td>1373</td>\n",
              "      <td>2020</td>\n",
              "      <td>2020-04-30</td>\n",
              "      <td>2020-04-30</td>\n",
              "      <td>Vias Municipais</td>\n",
              "      <td>30</td>\n",
              "      <td>4</td>\n",
              "      <td>ABRIL</td>\n",
              "      <td>2020</td>\n",
              "      <td>2020.04</td>\n",
              "      <td>QUINTA</td>\n",
              "      <td>17:50:00</td>\n",
              "      <td>TARDE</td>\n",
              "      <td>LIMEIRA</td>\n",
              "      <td>Campinas</td>\n",
              "      <td>RUA ITAPEMA</td>\n",
              "      <td>481,0</td>\n",
              "      <td>MUNICIPAL</td>\n",
              "      <td>PREFEITURA</td>\n",
              "      <td>PREFEITURA</td>\n",
              "      <td>PUBLICO</td>\n",
              "      <td>-22.552483</td>\n",
              "      <td>-47.405759</td>\n",
              "      <td>BICICLETA</td>\n",
              "      <td>CONDUTOR</td>\n",
              "      <td>VIA</td>\n",
              "      <td>CHOQUE</td>\n",
              "      <td>MURO/PAREDE/TALUDE</td>\n",
              "      <td>Mesmo dia</td>\n",
              "      <td>FEMININO</td>\n",
              "      <td>30-34</td>\n",
              "      <td>30.0</td>\n",
              "      <td>NÃO HÁ</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>30566</th>\n",
              "      <td>100919</td>\n",
              "      <td>20</td>\n",
              "      <td>2015</td>\n",
              "      <td>2015-01-01</td>\n",
              "      <td>2015-01-01</td>\n",
              "      <td>Rodovias</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>JANEIRO</td>\n",
              "      <td>2015</td>\n",
              "      <td>2015.01</td>\n",
              "      <td>QUINTA</td>\n",
              "      <td>5:50:00</td>\n",
              "      <td>MADRUGADA</td>\n",
              "      <td>RIBEIRAO PRETO</td>\n",
              "      <td>Ribeirão Preto</td>\n",
              "      <td>SP 333</td>\n",
              "      <td>47,0</td>\n",
              "      <td>ESTADUAL</td>\n",
              "      <td>DER</td>\n",
              "      <td>DR08 - Ribeirão Preto</td>\n",
              "      <td>PUBLICO</td>\n",
              "      <td>-21.208110</td>\n",
              "      <td>-47.681119</td>\n",
              "      <td>PEDESTRE</td>\n",
              "      <td>PEDESTRE</td>\n",
              "      <td>VIA</td>\n",
              "      <td>ATROPELAMENTO</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Mesmo dia</td>\n",
              "      <td>MASCULINO</td>\n",
              "      <td>25-29</td>\n",
              "      <td>27.0</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>30567</th>\n",
              "      <td>110714</td>\n",
              "      <td>2</td>\n",
              "      <td>2015</td>\n",
              "      <td>2015-01-01</td>\n",
              "      <td>2015-01-01</td>\n",
              "      <td>Rodovias</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>JANEIRO</td>\n",
              "      <td>2015</td>\n",
              "      <td>2015.01</td>\n",
              "      <td>QUINTA</td>\n",
              "      <td>3:00:00</td>\n",
              "      <td>MADRUGADA</td>\n",
              "      <td>NOVO HORIZONTE</td>\n",
              "      <td>São José do Rio Preto</td>\n",
              "      <td>SP 321</td>\n",
              "      <td>NAO DISPONIVEL</td>\n",
              "      <td>ESTADUAL</td>\n",
              "      <td>DER</td>\n",
              "      <td>DR09 - São José do Rio Preto</td>\n",
              "      <td>PUBLICO</td>\n",
              "      <td>-21.469984</td>\n",
              "      <td>-49.217659</td>\n",
              "      <td>AUTOMOVEL</td>\n",
              "      <td>CONDUTOR</td>\n",
              "      <td>VIA</td>\n",
              "      <td>CHOQUE</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Mesmo dia</td>\n",
              "      <td>NAO DISPONIVEL</td>\n",
              "      <td>18-24</td>\n",
              "      <td>24.0</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>30568</th>\n",
              "      <td>110714</td>\n",
              "      <td>2</td>\n",
              "      <td>2015</td>\n",
              "      <td>2015-01-01</td>\n",
              "      <td>2015-01-01</td>\n",
              "      <td>Rodovias</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>JANEIRO</td>\n",
              "      <td>2015</td>\n",
              "      <td>2015.01</td>\n",
              "      <td>QUINTA</td>\n",
              "      <td>3:00:00</td>\n",
              "      <td>MADRUGADA</td>\n",
              "      <td>NOVO HORIZONTE</td>\n",
              "      <td>São José do Rio Preto</td>\n",
              "      <td>SP 321</td>\n",
              "      <td>NAO DISPONIVEL</td>\n",
              "      <td>ESTADUAL</td>\n",
              "      <td>DER</td>\n",
              "      <td>DR09 - São José do Rio Preto</td>\n",
              "      <td>PUBLICO</td>\n",
              "      <td>-21.469984</td>\n",
              "      <td>-49.217659</td>\n",
              "      <td>AUTOMOVEL</td>\n",
              "      <td>PASSAGEIRO</td>\n",
              "      <td>VIA</td>\n",
              "      <td>CHOQUE</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Mesmo dia</td>\n",
              "      <td>NAO DISPONIVEL</td>\n",
              "      <td>18-24</td>\n",
              "      <td>19.0</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>30569</th>\n",
              "      <td>42428</td>\n",
              "      <td>30</td>\n",
              "      <td>2015</td>\n",
              "      <td>2015-01-01</td>\n",
              "      <td>2015-01-01</td>\n",
              "      <td>Rodovias</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>JANEIRO</td>\n",
              "      <td>2015</td>\n",
              "      <td>2015.01</td>\n",
              "      <td>QUINTA</td>\n",
              "      <td>19:00:00</td>\n",
              "      <td>NOITE</td>\n",
              "      <td>ITANHAEM</td>\n",
              "      <td>Baixada Santista</td>\n",
              "      <td>SP 055</td>\n",
              "      <td>321,0</td>\n",
              "      <td>ESTADUAL</td>\n",
              "      <td>DER</td>\n",
              "      <td>DR05 - Cubatão</td>\n",
              "      <td>PUBLICO</td>\n",
              "      <td>-24.166345</td>\n",
              "      <td>-46.763124</td>\n",
              "      <td>PEDESTRE</td>\n",
              "      <td>PEDESTRE</td>\n",
              "      <td>VIA</td>\n",
              "      <td>ATROPELAMENTO</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Mesmo dia</td>\n",
              "      <td>MASCULINO</td>\n",
              "      <td>45-49</td>\n",
              "      <td>45.0</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>30570</th>\n",
              "      <td>30407</td>\n",
              "      <td>8</td>\n",
              "      <td>2015</td>\n",
              "      <td>2015-01-01</td>\n",
              "      <td>2015-01-01</td>\n",
              "      <td>Rodovias</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>JANEIRO</td>\n",
              "      <td>2015</td>\n",
              "      <td>2015.01</td>\n",
              "      <td>QUINTA</td>\n",
              "      <td>14:00:00</td>\n",
              "      <td>TARDE</td>\n",
              "      <td>SAO PAULO</td>\n",
              "      <td>Metropolitana de São Paulo</td>\n",
              "      <td>SP 280</td>\n",
              "      <td>35,0</td>\n",
              "      <td>ESTADUAL</td>\n",
              "      <td>CONCESSIONÁRIA</td>\n",
              "      <td>VIAOESTE</td>\n",
              "      <td>PUBLICO</td>\n",
              "      <td>-23.515094</td>\n",
              "      <td>-46.964117</td>\n",
              "      <td>AUTOMOVEL</td>\n",
              "      <td>CONDUTOR</td>\n",
              "      <td>ESTABELECIMENTO DE SAUDE</td>\n",
              "      <td>CHOQUE</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Mesmo dia</td>\n",
              "      <td>MASCULINO</td>\n",
              "      <td>18-24</td>\n",
              "      <td>23.0</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>30571 rows × 34 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "       Id da Delegacia (RDO)  ...  Outro Veículo Envolvido\n",
              "0                     120514  ...                   ONIBUS\n",
              "1                     120514  ...                   ONIBUS\n",
              "2                     110429  ...                   NÃO HÁ\n",
              "3                      30309  ...                AUTOMOVEL\n",
              "4                      70923  ...                   NÃO HÁ\n",
              "...                      ...  ...                      ...\n",
              "30566                 100919  ...                      NaN\n",
              "30567                 110714  ...                      NaN\n",
              "30568                 110714  ...                      NaN\n",
              "30569                  42428  ...                      NaN\n",
              "30570                  30407  ...                      NaN\n",
              "\n",
              "[30571 rows x 34 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "SXcouBIJpuAC",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "G1TpyAymilHI",
        "colab_type": "code",
        "outputId": "75575cc8-721c-4e12-e04c-5f646c2398d1",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "df.shape"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(30571, 34)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "OVaCZyK7i3ah",
        "colab_type": "code",
        "outputId": "50204b3f-b799-44ed-f5bc-6b9c9bf3fcb7",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 377
        }
      },
      "source": [
        "df.head()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Id da Delegacia (RDO)</th>\n",
              "      <th>Número do Bo (RDO)</th>\n",
              "      <th>Ano do BO (RDO)</th>\n",
              "      <th>Data do Óbito</th>\n",
              "      <th>Data do Acidente</th>\n",
              "      <th>Tipo de via</th>\n",
              "      <th>Dia do óbito</th>\n",
              "      <th>Mês do Óbito</th>\n",
              "      <th>Mês Óbito Descrição</th>\n",
              "      <th>Ano do Óbito</th>\n",
              "      <th>Ano/Mês do Óbito</th>\n",
              "      <th>Dia da Semana</th>\n",
              "      <th>Hora do Acidente</th>\n",
              "      <th>Turno</th>\n",
              "      <th>Município</th>\n",
              "      <th>Região Administrativa</th>\n",
              "      <th>Logradouro</th>\n",
              "      <th>Númeral / KM</th>\n",
              "      <th>Jurisdição</th>\n",
              "      <th>Administração</th>\n",
              "      <th>Conservação</th>\n",
              "      <th>Tipo do local da ocorrência</th>\n",
              "      <th>LAT_(GEO)</th>\n",
              "      <th>LONG_(GEO)</th>\n",
              "      <th>Tipo do veículo da vítima</th>\n",
              "      <th>Tipo de vítima</th>\n",
              "      <th>Local do óbito</th>\n",
              "      <th>Tipo de acidente</th>\n",
              "      <th>Sub Tipo do Acidente</th>\n",
              "      <th>Tempo entre o Acidente e o óbito</th>\n",
              "      <th>Sexo</th>\n",
              "      <th>Faixa etária</th>\n",
              "      <th>Idade da vítima</th>\n",
              "      <th>Outro Veículo Envolvido</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>120514</td>\n",
              "      <td>889</td>\n",
              "      <td>2020</td>\n",
              "      <td>2020-04-30</td>\n",
              "      <td>2020-04-30</td>\n",
              "      <td>Rodovias</td>\n",
              "      <td>30</td>\n",
              "      <td>4</td>\n",
              "      <td>ABRIL</td>\n",
              "      <td>2020</td>\n",
              "      <td>2020.04</td>\n",
              "      <td>QUINTA</td>\n",
              "      <td>17:30:00</td>\n",
              "      <td>TARDE</td>\n",
              "      <td>ARACARIGUAMA</td>\n",
              "      <td>Sorocaba</td>\n",
              "      <td>SP 280</td>\n",
              "      <td>50,0</td>\n",
              "      <td>ESTADUAL</td>\n",
              "      <td>CONCESSIONÁRIA</td>\n",
              "      <td>VIAOESTE</td>\n",
              "      <td>PUBLICO</td>\n",
              "      <td>-23.439186</td>\n",
              "      <td>-47.065945</td>\n",
              "      <td>ONIBUS</td>\n",
              "      <td>CONDUTOR</td>\n",
              "      <td>VIA</td>\n",
              "      <td>CHOQUE</td>\n",
              "      <td>VEÍCULO ESTACIONADO</td>\n",
              "      <td>Mesmo dia</td>\n",
              "      <td>MASCULINO</td>\n",
              "      <td>45-49</td>\n",
              "      <td>48.0</td>\n",
              "      <td>ONIBUS</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>120514</td>\n",
              "      <td>889</td>\n",
              "      <td>2020</td>\n",
              "      <td>2020-04-30</td>\n",
              "      <td>2020-04-30</td>\n",
              "      <td>Rodovias</td>\n",
              "      <td>30</td>\n",
              "      <td>4</td>\n",
              "      <td>ABRIL</td>\n",
              "      <td>2020</td>\n",
              "      <td>2020.04</td>\n",
              "      <td>QUINTA</td>\n",
              "      <td>17:30:00</td>\n",
              "      <td>TARDE</td>\n",
              "      <td>ARACARIGUAMA</td>\n",
              "      <td>Sorocaba</td>\n",
              "      <td>SP 280</td>\n",
              "      <td>50,0</td>\n",
              "      <td>ESTADUAL</td>\n",
              "      <td>CONCESSIONÁRIA</td>\n",
              "      <td>VIAOESTE</td>\n",
              "      <td>PUBLICO</td>\n",
              "      <td>-23.439186</td>\n",
              "      <td>-47.065945</td>\n",
              "      <td>ONIBUS</td>\n",
              "      <td>PASSAGEIRO</td>\n",
              "      <td>ESTABELECIMENTO DE SAUDE</td>\n",
              "      <td>CHOQUE</td>\n",
              "      <td>VEÍCULO ESTACIONADO</td>\n",
              "      <td>Mesmo dia</td>\n",
              "      <td>MASCULINO</td>\n",
              "      <td>35-39</td>\n",
              "      <td>36.0</td>\n",
              "      <td>ONIBUS</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>110429</td>\n",
              "      <td>3887</td>\n",
              "      <td>2020</td>\n",
              "      <td>2020-04-30</td>\n",
              "      <td>2020-04-17</td>\n",
              "      <td>Rodovias</td>\n",
              "      <td>30</td>\n",
              "      <td>4</td>\n",
              "      <td>ABRIL</td>\n",
              "      <td>2020</td>\n",
              "      <td>2020.04</td>\n",
              "      <td>SEXTA</td>\n",
              "      <td>3:50:00</td>\n",
              "      <td>MADRUGADA</td>\n",
              "      <td>SAO JOSE DO RIO PRETO</td>\n",
              "      <td>São José do Rio Preto</td>\n",
              "      <td>BR 153</td>\n",
              "      <td>57,5</td>\n",
              "      <td>FEDERAL</td>\n",
              "      <td>CONCESSIONÁRIA</td>\n",
              "      <td>TRANSBRASILIANA</td>\n",
              "      <td>PUBLICO</td>\n",
              "      <td>-20.772532</td>\n",
              "      <td>-49.350863</td>\n",
              "      <td>MOTOCICLETA</td>\n",
              "      <td>CONDUTOR</td>\n",
              "      <td>ESTABELECIMENTO DE SAUDE</td>\n",
              "      <td>CHOQUE</td>\n",
              "      <td>DEFENSA / BARREIRA</td>\n",
              "      <td>Até 30 dias</td>\n",
              "      <td>MASCULINO</td>\n",
              "      <td>25-29</td>\n",
              "      <td>26.0</td>\n",
              "      <td>NÃO HÁ</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>30309</td>\n",
              "      <td>1745</td>\n",
              "      <td>2020</td>\n",
              "      <td>2020-04-30</td>\n",
              "      <td>2020-04-30</td>\n",
              "      <td>Rodovias</td>\n",
              "      <td>30</td>\n",
              "      <td>4</td>\n",
              "      <td>ABRIL</td>\n",
              "      <td>2020</td>\n",
              "      <td>2020.04</td>\n",
              "      <td>QUINTA</td>\n",
              "      <td>18:30:00</td>\n",
              "      <td>NOITE</td>\n",
              "      <td>SUZANO</td>\n",
              "      <td>Metropolitana de São Paulo</td>\n",
              "      <td>SP 021</td>\n",
              "      <td>110,0</td>\n",
              "      <td>ESTADUAL</td>\n",
              "      <td>CONCESSIONÁRIA</td>\n",
              "      <td>SPMAR</td>\n",
              "      <td>PUBLICO</td>\n",
              "      <td>-23.566580</td>\n",
              "      <td>-46.342199</td>\n",
              "      <td>PEDESTRE</td>\n",
              "      <td>PEDESTRE</td>\n",
              "      <td>VIA</td>\n",
              "      <td>ATROPELAMENTO</td>\n",
              "      <td>CRUZANDO A VIA</td>\n",
              "      <td>Mesmo dia</td>\n",
              "      <td>MASCULINO</td>\n",
              "      <td>NAO DISPONIVEL</td>\n",
              "      <td>NaN</td>\n",
              "      <td>AUTOMOVEL</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>70923</td>\n",
              "      <td>1373</td>\n",
              "      <td>2020</td>\n",
              "      <td>2020-04-30</td>\n",
              "      <td>2020-04-30</td>\n",
              "      <td>Vias Municipais</td>\n",
              "      <td>30</td>\n",
              "      <td>4</td>\n",
              "      <td>ABRIL</td>\n",
              "      <td>2020</td>\n",
              "      <td>2020.04</td>\n",
              "      <td>QUINTA</td>\n",
              "      <td>17:50:00</td>\n",
              "      <td>TARDE</td>\n",
              "      <td>LIMEIRA</td>\n",
              "      <td>Campinas</td>\n",
              "      <td>RUA ITAPEMA</td>\n",
              "      <td>481,0</td>\n",
              "      <td>MUNICIPAL</td>\n",
              "      <td>PREFEITURA</td>\n",
              "      <td>PREFEITURA</td>\n",
              "      <td>PUBLICO</td>\n",
              "      <td>-22.552483</td>\n",
              "      <td>-47.405759</td>\n",
              "      <td>BICICLETA</td>\n",
              "      <td>CONDUTOR</td>\n",
              "      <td>VIA</td>\n",
              "      <td>CHOQUE</td>\n",
              "      <td>MURO/PAREDE/TALUDE</td>\n",
              "      <td>Mesmo dia</td>\n",
              "      <td>FEMININO</td>\n",
              "      <td>30-34</td>\n",
              "      <td>30.0</td>\n",
              "      <td>NÃO HÁ</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   Id da Delegacia (RDO)  ...  Outro Veículo Envolvido\n",
              "0                 120514  ...                   ONIBUS\n",
              "1                 120514  ...                   ONIBUS\n",
              "2                 110429  ...                   NÃO HÁ\n",
              "3                  30309  ...                AUTOMOVEL\n",
              "4                  70923  ...                   NÃO HÁ\n",
              "\n",
              "[5 rows x 34 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "epQIyjjai9fX",
        "colab_type": "code",
        "outputId": "53543531-7462-4842-a238-c410f0c556eb",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        }
      },
      "source": [
        "df['Mês do Óbito'].hist()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f322dc35470>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 10
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "zWU7_SXCjQ8V",
        "colab_type": "code",
        "outputId": "5c18dcae-a5a9-4023-8e50-2393420c7845",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 221
        }
      },
      "source": [
        "df.columns"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['Id da Delegacia (RDO)', 'Número do Bo (RDO)', 'Ano do BO (RDO)',\n",
              "       'Data do Óbito', 'Data do Acidente', 'Tipo de via', 'Dia do óbito',\n",
              "       'Mês do Óbito', 'Mês Óbito Descrição', 'Ano do Óbito',\n",
              "       'Ano/Mês do Óbito', 'Dia da Semana', 'Hora do Acidente', 'Turno',\n",
              "       'Município', 'Região Administrativa', 'Logradouro', 'Númeral / KM',\n",
              "       'Jurisdição', 'Administração', 'Conservação',\n",
              "       'Tipo do local da ocorrência', 'LAT_(GEO)', 'LONG_(GEO)',\n",
              "       'Tipo do veículo da vítima', 'Tipo de vítima', 'Local do óbito',\n",
              "       'Tipo de acidente', 'Sub Tipo do Acidente',\n",
              "       'Tempo entre o Acidente e o óbito', 'Sexo', 'Faixa etária',\n",
              "       'Idade da vítima', 'Outro Veículo Envolvido'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "CRs55StXj8Sg",
        "colab_type": "code",
        "outputId": "ea07632e-015d-4430-abcd-81d31eded8bc",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 221
        }
      },
      "source": [
        "df['Conservação'].unique()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array(['VIAOESTE', 'TRANSBRASILIANA', 'SPMAR', 'PREFEITURA', 'AUTOBAN',\n",
              "       'AUTOPISTA REGIS BITTENCOURT', 'DR10 - São Paulo', 'ENTREVIAS',\n",
              "       'DR05 - Cubatão', 'DR02 - Itapetininga', 'VIAPAULISTA',\n",
              "       'NAO DISPONIVEL', 'TRIÂNGULO DO SOL', 'AUTOPISTA FERNÃO DIAS',\n",
              "       'ECOPISTAS', 'COLINAS', 'ECOVIAS', 'ROTA DAS BANDEIRAS',\n",
              "       'INTERVIAS', 'TAMOIOS', 'DR11 - Araçatuba', 'RODOVIAS DO TIETÊ',\n",
              "       'TEBE', 'DR09 - São José do Rio Preto', 'DR06 - Taubaté', 'CART',\n",
              "       'CENTROVIAS', 'DR01 - Campinas', 'SPVIAS',\n",
              "       'DR12 - Presidente Prudente', 'NOVADUTRA', 'DR07 - Assis',\n",
              "       'DR13 - Rio Claro', 'DR04 - Araraquara', 'DR08 - Ribeirão Preto',\n",
              "       'DR14 - Barretos', 'DR03 - Bauru', 'RENOVIAS', 'VIARONDON',\n",
              "       'CCR RODOANEL', 'DNIT'], dtype=object)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bKtZa9JPkLhX",
        "colab_type": "code",
        "outputId": "9159b78b-ab1f-4b72-dcd6-d427adbd87e0",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 221
        }
      },
      "source": [
        "df['Turno']"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0            TARDE\n",
              "1            TARDE\n",
              "2        MADRUGADA\n",
              "3            NOITE\n",
              "4            TARDE\n",
              "           ...    \n",
              "30566    MADRUGADA\n",
              "30567    MADRUGADA\n",
              "30568    MADRUGADA\n",
              "30569        NOITE\n",
              "30570        TARDE\n",
              "Name: Turno, Length: 30571, dtype: object"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "aMwO_cTBkpFA",
        "colab_type": "code",
        "outputId": "19d3d4cc-069d-4534-c921-15f680863ccc",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        }
      },
      "source": [
        " df['Mês do Óbito'].hist()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f322db17cc0>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 15
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "xnFs-JocoP76",
        "colab_type": "code",
        "outputId": "8e94cbda-a49f-4ba9-f1c9-69bed8c57c29",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 119
        }
      },
      "source": [
        "df['Turno'].value_counts()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "NOITE             10249\n",
              "TARDE              6551\n",
              "MADRUGADA          5910\n",
              "MANHA              5349\n",
              "NAO DISPONIVEL     2512\n",
              "Name: Turno, dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "3oruzxbLokqP",
        "colab_type": "code",
        "outputId": "05c7aa35-dd0c-4ba7-9ac5-bd345214fae2",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 71
        }
      },
      "source": [
        "import seaborn as sns"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.6/dist-packages/statsmodels/tools/_testing.py:19: FutureWarning: pandas.util.testing is deprecated. Use the functions in the public API at pandas.testing instead.\n",
            "  import pandas.util.testing as tm\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "x8ZbGgnYzbcm",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "import seaborn as sns"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "f093sOlgznTQ",
        "colab_type": "code",
        "outputId": "40af7e49-e752-4529-ae8e-40bfe388ce97",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 221
        }
      },
      "source": [
        "df.columns"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['Id da Delegacia (RDO)', 'Número do Bo (RDO)', 'Ano do BO (RDO)',\n",
              "       'Data do Óbito', 'Data do Acidente', 'Tipo de via', 'Dia do óbito',\n",
              "       'Mês do Óbito', 'Mês Óbito Descrição', 'Ano do Óbito',\n",
              "       'Ano/Mês do Óbito', 'Dia da Semana', 'Hora do Acidente', 'Turno',\n",
              "       'Município', 'Região Administrativa', 'Logradouro', 'Númeral / KM',\n",
              "       'Jurisdição', 'Administração', 'Conservação',\n",
              "       'Tipo do local da ocorrência', 'LAT_(GEO)', 'LONG_(GEO)',\n",
              "       'Tipo do veículo da vítima', 'Tipo de vítima', 'Local do óbito',\n",
              "       'Tipo de acidente', 'Sub Tipo do Acidente',\n",
              "       'Tempo entre o Acidente e o óbito', 'Sexo', 'Faixa etária',\n",
              "       'Idade da vítima', 'Outro Veículo Envolvido'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 20
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bQZhLMyf4bCR",
        "colab_type": "code",
        "outputId": "ddefde82-7e1c-417e-c258-a505747bde4a",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 163
        }
      },
      "source": [
        "df = df.rename(columns, axis=1)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-21-96f44f3ced5a>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mdf\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrename\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m: name 'columns' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "jQXAzCRl6OIu",
        "colab_type": "code",
        "outputId": "2bfdd209-6445-43ef-e518-962283ab06b5",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 221
        }
      },
      "source": [
        "df.columns"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['Id da Delegacia (RDO)', 'Número do Bo (RDO)', 'Ano do BO (RDO)',\n",
              "       'Data do Óbito', 'Data do Acidente', 'Tipo de via', 'Dia do óbito',\n",
              "       'Mês do Óbito', 'Mês Óbito Descrição', 'Ano do Óbito',\n",
              "       'Ano/Mês do Óbito', 'Dia da Semana', 'Hora do Acidente', 'Turno',\n",
              "       'Município', 'Região Administrativa', 'Logradouro', 'Númeral / KM',\n",
              "       'Jurisdição', 'Administração', 'Conservação',\n",
              "       'Tipo do local da ocorrência', 'LAT_(GEO)', 'LONG_(GEO)',\n",
              "       'Tipo do veículo da vítima', 'Tipo de vítima', 'Local do óbito',\n",
              "       'Tipo de acidente', 'Sub Tipo do Acidente',\n",
              "       'Tempo entre o Acidente e o óbito', 'Sexo', 'Faixa etária',\n",
              "       'Idade da vítima', 'Outro Veículo Envolvido'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "99g3Rz046ahC",
        "colab_type": "code",
        "outputId": "09de5302-46a2-4f64-a1f2-cf947220550e",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 163
        }
      },
      "source": [
        "df = df.rename(columns, axis=1)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-24-96f44f3ced5a>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mdf\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrename\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m: name 'columns' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "O7LaDpZx6qF2",
        "colab_type": "code",
        "outputId": "3f31a8f5-7f4b-4819-9f5d-4c2931f8b3e2",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 163
        }
      },
      "source": [
        "df = df.rename(columns, axis=1)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-25-96f44f3ced5a>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mdf\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrename\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m: name 'columns' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "b4OWQfPa6upw",
        "colab_type": "code",
        "outputId": "dea532bc-c7eb-4cd3-867c-496ded4f31b8",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 163
        }
      },
      "source": [
        "df"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-11-00cf07b74dcd>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mdf\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m: name 'df' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "1gnXiHZU64BA",
        "colab_type": "code",
        "outputId": "aa2a2327-c51f-4e9b-c816-fc44e5d980e5",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 163
        }
      },
      "source": [
        "df = df.rename(index, axis=1)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-27-b43ce88aae3c>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mdf\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrename\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindex\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m: name 'index' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "iVtVQqhm8Nq-",
        "colab_type": "code",
        "outputId": "de6891c6-628c-45e5-a127-d348ffb8fbda",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 163
        }
      },
      "source": [
        "df = df[list(columns.values())]"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-29-29f5952ec99d>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mdf\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m: name 'columns' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ow1jMfkf8moE",
        "colab_type": "code",
        "outputId": "a0c8b128-a6c4-4d28-eeb9-06f785066766",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 221
        }
      },
      "source": [
        "df['Tipo do veículo da vítima']"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0             ONIBUS\n",
              "1             ONIBUS\n",
              "2        MOTOCICLETA\n",
              "3           PEDESTRE\n",
              "4          BICICLETA\n",
              "            ...     \n",
              "30566       PEDESTRE\n",
              "30567      AUTOMOVEL\n",
              "30568      AUTOMOVEL\n",
              "30569       PEDESTRE\n",
              "30570      AUTOMOVEL\n",
              "Name: Tipo do veículo da vítima, Length: 30571, dtype: object"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 30
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "TY4_LpWR9Fvm",
        "colab_type": "code",
        "outputId": "71078e6e-1d2c-4f4b-857b-f23c5361ad46",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 170
        }
      },
      "source": [
        "df['Tipo do veículo da vítima'].value_counts()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "MOTOCICLETA       10026\n",
              "PEDESTRE           8163\n",
              "AUTOMOVEL          7518\n",
              "BICICLETA          1959\n",
              "NAO DISPONIVEL     1529\n",
              "CAMINHAO            935\n",
              "ONIBUS              255\n",
              "OUTROS              186\n",
              "Name: Tipo do veículo da vítima, dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 31
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "khf2iIPq9fKD",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "8ANp5eaG-Lk_",
        "colab_type": "code",
        "outputId": "68917b42-76c5-4d76-ac07-dca42d88f148",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 372
        }
      },
      "source": [
        "sns.countplot(df['Tipo do veículo da vítima'])\n",
        "plt.xticks(rotation = 90)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(array([0, 1, 2, 3, 4, 5, 6, 7]), <a list of 8 Text major ticklabel objects>)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 35
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "WF77K41j-aid",
        "colab_type": "code",
        "outputId": "207d0097-1dd9-4e74-fdb5-6ad3a0575ecd",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        }
      },
      "source": [
        "plt.scatter(df.lon, df.lat, s=1)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "error",
          "ename": "AttributeError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-36-fdb275afeb9e>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mscatter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlon\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlat\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0ms\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36m__getattr__\u001b[0;34m(self, name)\u001b[0m\n\u001b[1;32m   5272\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_info_axis\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_can_hold_identifiers_and_holds_name\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5273\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 5274\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mobject\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__getattribute__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   5275\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5276\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__setattr__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mAttributeError\u001b[0m: 'DataFrame' object has no attribute 'lon'"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "enqdkI71PPbl",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "oYm6v6fROzid",
        "colab_type": "code",
        "outputId": "17756357-6e2a-49f1-df6b-6c24fc7962b9",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 180
        }
      },
      "source": [
        "sns.countplot(df['Tipo do veículo da vítima'])\n",
        "plt.xticks(rotation = 45)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-6-25ffe2e52be7>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0msns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcountplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Tipo do veículo da vítima'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mxticks\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrotation\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m45\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'df' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "5KiquP9uPIdE",
        "colab_type": "code",
        "outputId": "0826359e-3820-4488-9222-658355d234ff",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 163
        }
      },
      "source": [
        "sns.countplot(df['Tipo do veículo da vítima'])"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-8-50db6839d90d>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0msns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcountplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Tipo do veículo da vítima'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m: name 'df' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Wg0TIhWOPki4",
        "colab_type": "code",
        "outputId": "cb7a9635-cc19-4586-dae2-b1096964f778",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 163
        }
      },
      "source": [
        "df"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-9-00cf07b74dcd>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mdf\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m: name 'df' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "dgzUt1VyP5VI",
        "colab_type": "code",
        "outputId": "06b74f05-ba30-4f35-fc91-67ad8e445ba4",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 163
        }
      },
      "source": [
        "df.head()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-10-c42a15b2c7cf>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mdf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhead\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m: name 'df' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "C03jKaoQQB6g",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "import pandas as pd"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "CKdhLCddQWHv",
        "colab_type": "code",
        "outputId": "2abc2cdd-07e1-47ae-9fbe-870c2ecb8698",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 163
        }
      },
      "source": [
        "df"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-13-00cf07b74dcd>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mdf\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m: name 'df' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "pBwCOuSmQYMN",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    }
  ]
}